DEVELOPER NOTES FOR SUMMA


Required Ant Targets
--------------------
Required targets for each module:

  all          -   Default target. Must build everything; 
                   jar(s), tarballs, and doc, ready for deployment.
                   Not allowed to depend on "clean".
                
  release      -   Bundle a *versioned* zip file with a module jar,
                   libs, doc, and config. See "Release Structure" section.
                   Both zipped and *unzipped* releases must be put in
                   <module>/summa.dist.dir.
                   Depends on distclean target.

  clean        -   Delete all compiled classes and jars. Not release zip-balls.
                   *Only* distclean and release targets may depend on this target.
  
  distclean    -   Restore module to cvs/svn state. Delete all classes, jars,
                   documentation, release-zip-balls, and 3rd party libs.
                   *Only* the release target may depend on this target.

  doc          -   Not allowed to depend on "clean". Called seprately
                   from the "all" target. ALl documentation must be placed
                   in <module>/summa.doc.dir.

  compile      -   Compile all classes that should go in a release.
                   Do nothing else. All compiled classes should go in the 
                   <module>/summa.classes.dir dir.

  depends      -   Make sure all dependencies are available.
  
  test         -   Run all unit tests - using compiled classes of other modules
                   directly. Typically depends on test.compile.
  
  test.compile -   Compile all ubnit tests.
  
  test.release -   Run all unit tests against compiled release *jar* files of
                   own+other modules. By convention these jars can be found in
                   <module>/summa.dist.dir/module-VERSION/moduleJar-VERSION.jar.
                   Depends on release target.
  
  <all other>  -   All other targets must be prefixed with a "." to indicate that
                   they are "private".

Recomended Targets
------------------
   .jar        -   Build the jar file. Auxiliary target for the release target.
   
   .changelog  -   Roll the changelog. See Dice module for an example.

Additional Build Policies:
--------------------------
  * Don't move or delete the compiled java classes. Other modules
    might depend upon them. Only copy. Disk space is cheap.

  * Any module should be able to build by running "ant" inside
    its main directory. Ie. it should resolve any depenancies itself.
  
  * Jar files do not have a build in classpath. The classpath is given
    solely on the command line.

  * Before commiting non-trivial changes (read: something that might screw
    up the build system), run "ant release" from the Summa/ root dir.
    If you are a good boy/girl you even make sure unit tests still pass
    - but that also depends on how close we are to a release.


Release Structure
-----------------
The layout of a module compiled by its "release" target must be as follows:

    summa-<module>-VERSION/
        lib/
            <all 3rd party libs here>
        bin/
            <all scripts and binaries here>
        doc/
            <module javadoc goes here>
        config/
            <all config files - fx log4j.xml>
            
        summa-<module>-VERSION.jar
        summa-<module>-api-VERSION.jar (optional)
        README

Webservice Releases
-------------------
A release of a webservice .war must use the naming pattern
summa-<module>[-servicename].war and place the file
in <module>/summa.dist.dir.

The .war must bundle the build.properties file in META-INF/ for
identification purposes (version numbering the war file will
give us headaches).


Notes:
----------------
  * Modules can ensure that global dependencies are indeed available by
    running <ant inheritall="false" dir=".." target="depends"/>.
    Modules that doesn't have global dependencies, are free not to do this.
  
  * Summa/Common/scripts/template.sh is a template you can use to autogenerate
    scripts to launch your applications.
